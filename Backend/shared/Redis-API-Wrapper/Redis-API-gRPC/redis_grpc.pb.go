// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: redis.proto

package Redis_API_gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserStatusService_SetUserStatus_FullMethodName   = "/redisApi.UserStatusService/SetUserStatus"
	UserStatusService_GetUserStatus_FullMethodName   = "/redisApi.UserStatusService/GetUserStatus"
	UserStatusService_SetUserSession_FullMethodName  = "/redisApi.UserStatusService/SetUserSession"
	UserStatusService_GetUserSession_FullMethodName  = "/redisApi.UserStatusService/GetUserSession"
	UserStatusService_IncrementMetric_FullMethodName = "/redisApi.UserStatusService/IncrementMetric"
	UserStatusService_UpdateMetric_FullMethodName    = "/redisApi.UserStatusService/UpdateMetric"
	UserStatusService_ResetMetric_FullMethodName     = "/redisApi.UserStatusService/ResetMetric"
	UserStatusService_GetMetrics_FullMethodName      = "/redisApi.UserStatusService/GetMetrics"
	UserStatusService_GetAllMetrics_FullMethodName   = "/redisApi.UserStatusService/GetAllMetrics"
)

// UserStatusServiceClient is the client API for UserStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The UserStatusService defines all available RPCs for user status, session, and metrics.
type UserStatusServiceClient interface {
	// Set the status (online, offline, afk) for a user.
	SetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get the current status of a user.
	GetUserStatus(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserStatusResponse, error)
	// Set the API-ID for a user session.
	SetUserSession(ctx context.Context, in *SetUserSessionRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get the API-ID for a user session.
	GetUserSession(ctx context.Context, in *GetUserSessionRequest, opts ...grpc.CallOption) (*GetUserSessionResponse, error)
	// Increment a metric by a given value.
	IncrementMetric(ctx context.Context, in *MetricUpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Set a metric to a specific value.
	UpdateMetric(ctx context.Context, in *MetricUpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Reset a metric to zero.
	ResetMetric(ctx context.Context, in *MetricKeyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get values for a list of metric keys.
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	// Get all metrics and their values.
	GetAllMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type userStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStatusServiceClient(cc grpc.ClientConnInterface) UserStatusServiceClient {
	return &userStatusServiceClient{cc}
}

func (c *userStatusServiceClient) SetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_SetUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) GetUserStatus(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_GetUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) SetUserSession(ctx context.Context, in *SetUserSessionRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_SetUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) GetUserSession(ctx context.Context, in *GetUserSessionRequest, opts ...grpc.CallOption) (*GetUserSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSessionResponse)
	err := c.cc.Invoke(ctx, UserStatusService_GetUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) IncrementMetric(ctx context.Context, in *MetricUpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_IncrementMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) UpdateMetric(ctx context.Context, in *MetricUpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_UpdateMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) ResetMetric(ctx context.Context, in *MetricKeyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_ResetMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, UserStatusService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) GetAllMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, UserStatusService_GetAllMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStatusServiceServer is the server API for UserStatusService service.
// All implementations must embed UnimplementedUserStatusServiceServer
// for forward compatibility.
//
// The UserStatusService defines all available RPCs for user status, session, and metrics.
type UserStatusServiceServer interface {
	// Set the status (online, offline, afk) for a user.
	SetUserStatus(context.Context, *UserStatusRequest) (*StatusResponse, error)
	// Get the current status of a user.
	GetUserStatus(context.Context, *UserID) (*UserStatusResponse, error)
	// Set the API-ID for a user session.
	SetUserSession(context.Context, *SetUserSessionRequest) (*StatusResponse, error)
	// Get the API-ID for a user session.
	GetUserSession(context.Context, *GetUserSessionRequest) (*GetUserSessionResponse, error)
	// Increment a metric by a given value.
	IncrementMetric(context.Context, *MetricUpdateRequest) (*StatusResponse, error)
	// Set a metric to a specific value.
	UpdateMetric(context.Context, *MetricUpdateRequest) (*StatusResponse, error)
	// Reset a metric to zero.
	ResetMetric(context.Context, *MetricKeyRequest) (*StatusResponse, error)
	// Get values for a list of metric keys.
	GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error)
	// Get all metrics and their values.
	GetAllMetrics(context.Context, *Empty) (*MetricsResponse, error)
	mustEmbedUnimplementedUserStatusServiceServer()
}

// UnimplementedUserStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserStatusServiceServer struct{}

func (UnimplementedUserStatusServiceServer) SetUserStatus(context.Context, *UserStatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) GetUserStatus(context.Context, *UserID) (*UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) SetUserSession(context.Context, *SetUserSessionRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSession not implemented")
}
func (UnimplementedUserStatusServiceServer) GetUserSession(context.Context, *GetUserSessionRequest) (*GetUserSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSession not implemented")
}
func (UnimplementedUserStatusServiceServer) IncrementMetric(context.Context, *MetricUpdateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementMetric not implemented")
}
func (UnimplementedUserStatusServiceServer) UpdateMetric(context.Context, *MetricUpdateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedUserStatusServiceServer) ResetMetric(context.Context, *MetricKeyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMetric not implemented")
}
func (UnimplementedUserStatusServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedUserStatusServiceServer) GetAllMetrics(context.Context, *Empty) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetrics not implemented")
}
func (UnimplementedUserStatusServiceServer) mustEmbedUnimplementedUserStatusServiceServer() {}
func (UnimplementedUserStatusServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStatusServiceServer will
// result in compilation errors.
type UnsafeUserStatusServiceServer interface {
	mustEmbedUnimplementedUserStatusServiceServer()
}

func RegisterUserStatusServiceServer(s grpc.ServiceRegistrar, srv UserStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserStatusService_ServiceDesc, srv)
}

func _UserStatusService_SetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).SetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_SetUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).SetUserStatus(ctx, req.(*UserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_GetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).GetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_GetUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).GetUserStatus(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_SetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).SetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_SetUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).SetUserSession(ctx, req.(*SetUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_GetUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).GetUserSession(ctx, req.(*GetUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_IncrementMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).IncrementMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_IncrementMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).IncrementMetric(ctx, req.(*MetricUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_UpdateMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).UpdateMetric(ctx, req.(*MetricUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_ResetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).ResetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_ResetMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).ResetMetric(ctx, req.(*MetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_GetAllMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).GetAllMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_GetAllMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).GetAllMetrics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStatusService_ServiceDesc is the grpc.ServiceDesc for UserStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redisApi.UserStatusService",
	HandlerType: (*UserStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUserStatus",
			Handler:    _UserStatusService_SetUserStatus_Handler,
		},
		{
			MethodName: "GetUserStatus",
			Handler:    _UserStatusService_GetUserStatus_Handler,
		},
		{
			MethodName: "SetUserSession",
			Handler:    _UserStatusService_SetUserSession_Handler,
		},
		{
			MethodName: "GetUserSession",
			Handler:    _UserStatusService_GetUserSession_Handler,
		},
		{
			MethodName: "IncrementMetric",
			Handler:    _UserStatusService_IncrementMetric_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _UserStatusService_UpdateMetric_Handler,
		},
		{
			MethodName: "ResetMetric",
			Handler:    _UserStatusService_ResetMetric_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _UserStatusService_GetMetrics_Handler,
		},
		{
			MethodName: "GetAllMetrics",
			Handler:    _UserStatusService_GetAllMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis.proto",
}
